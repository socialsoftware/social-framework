package pt.ist.socialframework.domain;

enum pt.ist.socialframework.domain.InteractionState.StateOfInteraction as StateOfInteraction;

enum pt.ist.socialframework.domain.SynchronizationMode.HowSynchronizationMade as HowSynchronizationMade;
enum pt.ist.socialframework.domain.SynchronizationMode.WhenSynchronizationMade as WhenSynchronizationMade;
enum pt.ist.socialframework.domain.SynchronizationMode.AcessSynchronization as AcessSynchronization;

enum pt.ist.socialframework.domain.ChangesState.State as State;

class SocialPlatform;

class Party;

class Interaction {
	DateTime creationTime;
}

class InteractionState {
	StateOfInteraction stateOfInteraction;
}

class Information ;

class ChangesState {
	State state;
}

class InformationRoleManager;

class InformationRole {
	String role;
}

class InformationRelation;

class SynchronizationMode {
	HowSynchronizationMade howSynchronizationMade;
	WhenSynchronizationMade whenSynchronizationMade;
	AcessSynchronization acessSynchronization;
}

class Attribute {
	String value;
}

class AttributeRoleManager;
	
class AttributeRole {
	String role;
}

class TextAttribute extends Attribute {
	String textValue;
}

class NumericAttribute extends .pt.ist.socialframework.domain.Attribute {
	float numericValue;
}

class Discussion {
	String theme;
	DateTime creationTime;
}

class Conversation { 
	DateTime creationTime;
	String message;
}

relation SocialPlatformHasParty {
	SocialPlatform playsRole socialPlatform { multiplicity 0..1; }
	Party playsRole party { multiplicity 0..*; }
}

relation SocialPlatformHasInteraction {
	SocialPlatform playsRole socialPlatform { multiplicity 0..1; }
	Interaction playsRole interaction { multiplicity 0..*; }
}

relation InteractionHasInteractionState {
	Interaction playsRole interaction {multiplicity 0..1;}
	InteractionState playsRole state { multiplicity 0..1; }
}

relation SocialPlaformHasInformationRoleManager {
	SocialPlatform playsRole socialPlatform { multiplicity 0..1; }
	InformationRoleManager playsRole informationRoleManager { multiplicity 0..1; }
}

relation SocialPlatformHasAttributeRoleManager { 
	SocialPlatform playsRole socialPlatform { multiplicity 0..1; }
	AttributeRoleManager playsRole attributeRoleManager { multiplicity 0..1; }
}

relation InformationHasCreator {
	Information playsRole information { multiplicity 0..*; }
	Party playsRole creator { multiplicity 0..1; }
}

relation InformatioHasChangesState {
	Information playsRole information { multiplicity 0..1; }
	ChangesState playsRole changeState { multiplicity 0..1; }
}

relation InformationToCloneHasSynchronizationMode { 
	Information playsRole originalInformation { multiplicity 0..1; }
	SynchronizationMode playsRole originalSynchronizationMode { multiplicity 0..*; }
}

relation SynchronizationModeHasClonedInformation {
	SynchronizationMode playsRole clonedSynchronizationMode { multiplicity 0..1; }
	Information playsRole informationCloned { multiplicity 0..1; }
}

relation InformationHasInformationRelation {
	Information playsRole informationSource { multiplicity 0..1; }
	InformationRelation playsRole informationRelationSource { multiplicity 0..*; }
}

relation InformationRelationHasInformation { 
	InformationRelation playsRole informationRelationDestination { multiplicity 0..*; }
	Information playsRole informationDestination { multiplicity 0..*; }
}

relation PartyHasInteraction { 
	Party playsRole party { multiplicity 0..*; }
	Interaction playsRole interaction { multiplicity 0..*; }
}

relation InteractionHasInteractions {
	Interaction playsRole sourceInteraction { multiplicity 0..1; }
	Interaction playsRole destinationInteraction { multiplicity 0..*; }
}

relation InteractionHasAcceptedInformation { 
	Interaction playsRole interactionWithAcceptedInformation { multiplicity 0..1; }
	Information playsRole aceptedInformation { multiplicity 0..*; }
}

relation InteractionHasInformationWaitingForAcceptance { 
	Interaction playsRole interactionWithInformationForAcceptance { multiplicity 0..1; }
	Information playsRole informationWaitingForAcceptance { multiplicity 0..*; }
}

relation InformationHasInformationRole { 
	Information playsRole information { multiplicity 0..*; }
	InformationRole playsRole role {multiplicity 0..1;}
}

relation InformationRoleManagerHasInformationRole { 
	InformationRoleManager playsRole informationRoleManager { multiplicity 0..1; }
	InformationRole playsRole informationRole { multiplicity 0..*; }
}

relation InformationHasAttributes { 
	Information playsRole information { multiplicity 0..1; }
	Attribute playsRole attribute { multiplicity 0..*; }
}

relation AttributeHasChangesState {
	Attribute playsRole attribute { multiplicity 0..1;}
	ChangesState playsRole changeState { multiplicity 0..1; }
}
	

relation AttributeHasAttributeRole { 
	Attribute playsRole attribute { multiplicity 0..*; }
	AttributeRole playsRole attributeRole { multiplicity 0..1; }
}

relation AttributeRoleManagerHasAttributeRole {
	AttributeRoleManager playsRole attributeRoleManager { multiplicity 0..1; }
	AttributeRole playsRole attributeRole { multiplicity 0..*; }
}

relation AttributeToCloneHasSynchronizationMode { 
	Attribute playsRole originalAttribute { multiplicity 0..1; }
	SynchronizationMode playsRole originalSynchronizationMode { multiplicity 0..*; }
}

relation SynchronizationModeHasClonedAttribute {
	SynchronizationMode playsRole clonedSynchronizationMode { multiplicity 0..1; }
	Attribute playsRole attributeCloned { multiplicity 0..1; }
}

relation InteractionHasDiscussion { 
	Interaction  playsRole interaction { multiplicity 0..1; }
	Discussion playsRole discussion { multiplicity 0..*; }
}

relation DiscussionHasConversation {
	Discussion playsRole discussion { multiplicity 0..1; }
	Conversation playsRole conversation { multiplicity 0..*; }
}

relation DiscussionHasCreatorParty {
	Discussion playsRole discussion { multiplicity 0..1; }
	Party playsRole creator { multiplicity 0..1; }
}

relation ConversationHasSenderParty {
	Conversation playsRole conversation { multiplicity 0..1; }
	Party playsRole sender { multiplicity 0..1; }
}
